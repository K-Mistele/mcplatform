---
description: 
globs: 
alwaysApply: true
---
# MarkdownShare Codebase Conventions & Architecture

## Project Overview

MCPplatform is a bun monorepo

## Tech Stack & Dependencies

### Core Framework
- **Next.js 15** with App Router (React Server Components)
- **React 19** with modern hooks and patterns
- **TypeScript** for type safety throughout
- **Bun** as the package manager and runtime (per workspace rules)

### Styling & UI
- **Tailwind CSS** for utility-first styling
- **shadcn/ui** for pre-built accessible components
- **Lucide React** for icons (use `SomethingIcon` import pattern)
- **class-variance-authority** for component variants
- **CSS Variables** for theming (light/dark mode support)

### Database & Authentication
- **Supabase** as the database backend (PostgreSQL)
- **Drizzle ORM** for type-safe database operations
- **Better Auth** for authentication with OAuth support


### State Management & Data Fetching
- **TanStack Query** for server state management
- **React Context** for global state
- **Zustand** for client-side state (if needed)
- **React Hook Form** for form handling

### Development & Quality
- **Biome** for linting and formatting (NOT ESLint/Prettier)
- **Drizzle Kit** for database migrations
- **TypeScript** with strict configuration

## Project Structure

```
markdownshare/
├── src/
│   ├── app/                    # Next.js App Router
│   │   ├── api/               # API routes (REST endpoints)
│   │   │   ├── auth/          # Better Auth routes
│   │   │   └── documents/     # Document CRUD operations
│   │   ├── auth/              # Authentication pages
│   │   ├── dashboard/         # User dashboard
│   │   ├── document/          # Document editing/viewing
│   │   ├── globals.css        # Global styles & CSS variables
│   │   ├── layout.tsx         # Root layout with providers
│   │   └── page.tsx           # Landing page
│   ├── components/            # Reusable components
│   │   ├── editor/           # Document editor components
│   │   ├── mdx/              # MDX rendering components
│   │   ├── ui/               # shadcn/ui components
│   │   ├── error-boundary.tsx # Error handling
│   │   └── providers.tsx     # App providers
│   ├── lib/                   # Utility functions & configs
│   │   ├── db/               # Database schema & migrations
│   │   ├── actions.ts        # Server actions
│   │   ├── auth.ts           # Authentication config
│   │   ├── data.ts           # Database queries
│   │   ├── supabase.ts       # Supabase client
│   │   └── utils.ts          # Utility functions
│   └── types/                # TypeScript type definitions
├── biome.jsonc               # Biome configuration
├── components.json           # shadcn/ui configuration
├── drizzle.config.ts        # Database configuration
├── tailwind.config.ts       # Tailwind CSS configuration
└── tsconfig.json            # TypeScript configuration
```

## Database Schema & Patterns

### Schema Design (Drizzle ORM)
```typescript
// Core tables with proper relationships
users                    // Better Auth managed users
documents                // Markdown documents with metadata
document_collaborators   // User permissions per document
comments                 // Threaded comments with positioning
document_versions        // Version history tracking
```

### Key Patterns:
- **primary keys** for all entities
- **Timestamps** with timezone support
- **Foreign key cascades** for data integrity
- **Indexed columns** for query performance
- **Check constraints** for data validation
- **JSON columns** for flexible data (positions, metadata)

## Authentication & Authorization

### Better Auth Configuration
- **Email/password** authentication
- **OAuth providers** (GitHub, Google)
- **Session management** with secure tokens
- **Type-safe** user session handling

### Authorization Patterns
```typescript
// Always check authentication in server actions
async function requireAuth() {
    const user = await getCurrentUser()
    if (!user) throw new Error('Authentication required')
    return user
}

// Check permissions before operations
const canEdit = await canUserEditDocument(id, user.id)
if (!canEdit) throw new Error('Access denied')
```

## Server Actions & API Routes

### Server Actions (`src/lib/actions.ts`)
- **MUST** validate authentication/authorization
- **MUST** use `'use server'` directive
- **MUST** handle errors gracefully
- **ALWAYS** check user permissions before mutations
- Used for form submissions and direct client calls

### API Routes (`src/app/api/`)
- **RESTful** endpoint design
- **Direct database operations** (NOT server actions)
- **Session-based** authentication
- **Consistent error handling** with proper HTTP status codes
- **JSON responses** with standardized format

### Critical Rule: API Routes vs Server Actions
```typescript
// ❌ WRONG: Never call server actions from API routes
export async function POST(request: NextRequest) {
    await createDocument(data) // Don't do this
}

// ✅ CORRECT: Use direct database operations in API routes
export async function POST(request: NextRequest) {
    const result = await db.insert(documents).values(data).returning()
}
```

## Component Architecture

### File Naming Conventions
- **Components**: `kebab-case.tsx` (e.g., `markdown-editor.tsx`)
- **Pages**: `page.tsx` in route folders
- **Layouts**: `layout.tsx` in route folders
- **Client components**: Explicit `'use client'` directive

### Component Patterns
```typescript
// Use proper TypeScript interfaces
interface DocumentEditorProps {
    document: Document
    onSave: (content: string) => void
}

// Prefer React.forwardRef for UI components
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    ({ className, ...props }, ref) => (
        <button ref={ref} className={cn(buttonVariants(), className)} {...props} />
    )
)
```

### Page Composition Pattern (CRITICAL)
**All pages MUST follow this async server component pattern:**

```typescript
// ✅ CORRECT: Async server component with auth and data fetching
// src/app/dashboard/page.tsx
import { ErrorBoundary } from '@/components/error-boundary'
import { auth } from '@/lib/auth'
import { getUserDocuments } from '@/lib/data'
import { headers } from 'next/headers'
import { redirect } from 'next/navigation'
import { Suspense } from 'react'
import { DashboardClient } from './dashboard-client'

export default async function DashboardPage() {
    // 1. Check authentication on server
    const session = await auth.api.getSession({
        headers: await headers()
    })

    if (!session) {
        redirect('/auth/signin')
    }

    // 2. Get promises but don't await them - pass to client components
    const documentsPromise = getUserDocuments(session.user.id)

    // 3. Wrap in ErrorBoundary and Suspense
    return (
        <ErrorBoundary>
            <Suspense fallback={<LoadingFallback />}>
                <DashboardClient documentsPromise={documentsPromise} />
            </Suspense>
        </ErrorBoundary>
    )
}

// ✅ CORRECT: Client component that uses the 'use' hook
// src/app/dashboard/dashboard-client.tsx
'use client'

import { use } from 'react'

interface DashboardClientProps {
    documentsPromise: Promise<Document[]>
}

export function DashboardClient({ documentsPromise }: DashboardClientProps) {
    // Use React 19 'use' hook to unwrap the promise
    const documents = use(documentsPromise)
    
    return (
        <div>
            {/* Render UI with resolved data */}
        </div>
    )
}
```

**Key Requirements:**
1. **Pages are async server components** - perform auth checks and data fetching
2. **Authentication on server** - use `auth.api.getSession({ headers: await headers() })`
3. **Pass promises to client components** - don't await in the page component
4. **Wrap in ErrorBoundary and Suspense** - with appropriate fallback components
5. **Client components use 'use' hook** - to unwrap promises and suspend

**❌ NEVER DO:**
- Client components with useEffect for auth checks
- Awaiting promises in page components that pass data to client components
- Missing ErrorBoundary or Suspense wrappers
- Authentication checks in client components

### shadcn/ui Integration
- **Install with**: `bunx shadcn@canary add [component]` (canary for Next.js 15)
- **Never use Radix UI directly** - always use shadcn/ui
- **Custom variants** using class-variance-authority
- **Consistent naming**: Import as `SomethingIcon` from lucide-react

## Styling Conventions

### Tailwind CSS Patterns
- **CSS Variables** for theming (defined in `globals.css`)
- **Utility classes** for consistent spacing/sizing
- **Custom components** using `@apply` sparingly
- **Responsive design** mobile-first approach
- **Dark mode** support via CSS variables

### Component Styling
```typescript
// Use cn() utility for conditional classes
const className = cn(
    "base-classes",
    variant === "primary" && "variant-classes",
    className // Allow prop overrides
)
```

## Data Fetching & State Management

### TanStack Query Configuration
- **60-second stale time** for queries
- **10-minute garbage collection** time
- **Background refetching** for fresh data
- **Optimistic updates** for better UX

### Data Layer Patterns
```typescript
// Separate data queries from mutations
// src/lib/data.ts - Read operations
export const getUserDocuments = cache(async (userId: string) => {
    return await db.select().from(documents).where(eq(documents.authorId, userId))
})

// src/lib/actions.ts - Write operations
export async function createDocument(data: DocumentInsert) {
    const user = await requireAuth()
    return await db.insert(documents).values({...data, authorId: user.id})
}
```

## Error Handling

### Error Boundaries
- **Custom ErrorBoundary** component for React errors
- **Graceful fallbacks** with user-friendly messages
- **Try-again functionality** for recoverable errors

### Server Error Patterns
```typescript
// Consistent error responses
try {
    // Operation
} catch (error) {
    console.error('Operation failed:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
}
```

## Development Workflows

### Code Quality Rules
- **Biome** for linting/formatting (120 char line width, 4-space indent)
- **TypeScript strict mode** enabled
- **No explicit any** allowed without justification
- **Consistent import order** (external, internal, relative)

### Database Migrations
```bash
# Generate migration
bun run drizzle:generate

# Apply migration
bun run drizzle:migrate

# View database
bun run drizzle:studio
```

### Development Commands
```bash
# Development server
bun run dev

# Type checking
bun run type-check

# Database operations
bun run drizzle:[generate|migrate|push|studio]
```

## Security Best Practices

### Authentication
- **Session validation** on every protected route
- **CSRF protection** via Better Auth
- **Secure password hashing** with bcryptjs
- **OAuth integration** with proper scopes

### Data Protection
- **Row Level Security** enabled in Supabase
- **Input validation** on all user inputs
- **SQL injection prevention** via Drizzle ORM
- **XSS prevention** in MDX rendering

### Environment Variables
```typescript
// Use utility functions for environment access
const dbUrl = requireEnvironment('DATABASE_URL')
const optionalUrl = getEnvironment('OPTIONAL_URL', 'fallback')
```

## Performance Optimization

### Next.js Features
- **App Router** for modern routing
- **Server Components** by default
- **Streaming** for better loading states
- **Image optimization** for assets

### Database Optimization
- **Indexed queries** for common operations
- **Connection pooling** via Supabase
- **Query optimization** with Drizzle
- **Caching strategies** with TanStack Query

## Testing & Validation

### UI Testing
- **Puppeteer integration** for E2E testing
- **Always test in headless mode**
- **1920x1080 resolution** for consistency
- **Test user**: `claude@example.com` / `supersecurepassword`

### Type Safety
- **Drizzle schema types** for database operations
- **Better Auth types** for user sessions
- **Zod validation** for form schemas
- **Strict TypeScript** configuration

## Future Considerations

### Planned Features
- **Real-time collaboration** with Y.js
- **Comments system** with threading
- **File uploads** via Supabase Storage
- **Version history** with diff viewing
- **Team management** with roles

### Scalability Patterns
- **Modular architecture** for easy extension
- **Database design** supports complex relationships
- **API design** follows RESTful principles
- **Component library** ready for expansion

## Common Patterns & Anti-Patterns

### ✅ DO:
- Use server actions for form submissions
- Always validate authentication/authorization
- Use TypeScript interfaces for component props
- Implement error boundaries for resilience
- Use shadcn/ui components consistently
- Follow kebab-case naming for components

### ❌ DON'T:
- Call server actions from API routes
- Use Radix UI directly (use shadcn/ui)
- Skip authentication checks in mutations
- Use `any` type without justification
- Mix different icon libraries
- Ignore error handling in async operations

---

This codebase follows modern React/Next.js patterns with a focus on type safety, performance, and maintainability. When making changes, always consider the authentication requirements, error handling, and consistency with existing patterns.
